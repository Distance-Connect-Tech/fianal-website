// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// MongoDB Database Connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üßë‚Äçüíª User Model
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  kindeId      String  @unique
  email        String  @unique
  name         String?
  avatarUrl    String?
  role         Role    @default(USER)
  isRegistered Boolean @default(false)

  // Relations (One-to-One)
  student Student?
  mentor  Mentor?
  startup Startup?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum for User Role
enum Role {
  USER
  STUDENT
  MENTOR
  STARTUP
}

enum SrudentRole {
  HIGHSCHOOL
  COLLEGE
  WORKING
}

// üéì Student Model
model Student {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  studentRole SrudentRole?
  studentName String?

  //High School
  institutionName String?
  pinCode         Int?
  state           String?
  interestFields  String[]

  //College
  courseSpecialization String?

  //Working
  companyName String?
  jobTitle    String?
  experience  String?
  industry    String?

  scheduledMeetings ScheduledMeetings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üßë‚Äçüè´ Mentor Model
model Mentor {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  mentorName     String?
  currentCompany String?
  jobTitle       String?
  experience     String?
  industry       String?
  pinCode        Int?
  state          String?
  hiringFields   String[]

  meetingEvents     MeetingEvent[]
  availability      Availability?
  scheduledMeetings ScheduledMeetings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üöÄ Startup Model
model Startup {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  comapanyName   String?
  companyUrl     String?
  industry       String?
  pinCode        Int?
  state          String?
  interestFields String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üìÖ MeetingEvent Model
model MeetingEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId])
  mentorUserId String @db.ObjectId

  eventName   String
  duration    Int
  description String?
  meetEmail  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId])
  mentorUserId String @unique @db.ObjectId

  daysAvailable Json
  startTime     String
  endTime       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduledMeetings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId])
  mentorUserId String @db.ObjectId

  student       Student @relation(fields: [studentUserId], references: [userId])
  studentUserId String  @db.ObjectId

  selectedTime      String
  selectedDate      DateTime
  formatedDate      String
  formatedTimeStamp String
  duration          Int
  meetUrl           String
  eventId           String
  userNote          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
