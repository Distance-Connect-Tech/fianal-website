// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// MongoDB Database Connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// 🧑‍💻 User Model
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId

  kindeId      String  @unique
  email         String   @unique
  name          String?
  avatarUrl    String?
  role          Role     @default(USER)
  isRegistered Boolean  @default(false)

  // Relations (One-to-One)
  student       Student?
  mentor        Mentor?
  startup       Startup?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Enum for User Role
enum Role {
  USER
  STUDENT
  MENTOR
  STARTUP
}

// 🎓 Student Model
model Student {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId

  university    String?
  course        String?
  yearOfStudy   String?
  linkedInUrl   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 🧑‍🏫 Mentor Model
model Mentor {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique @db.ObjectId

  positionTitle      String?
  industryExperience String?
  yearsOfExperience  String?
  linkedInUrl        String?
  professionalIdUrl  String?
  companyEmail       String?


  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// 🚀 Startup Model
model Startup {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique @db.ObjectId

  startupName        String?
  startupEmail       String?
  industry           String?
  website            String?
  linkedInUrl        String?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
